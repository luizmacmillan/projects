<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebChat</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      body {
        font: 13px Helvetica, Arial;
      }
      #sendMessageForm {
        background: #000;
        padding: 3px;
        position: fixed;
        bottom: 0;
        width: 100%;
      }
      #setNickForm {
        background: #000;
        padding: 3px;
        top: 0;
        width: 100%;
      }
      form input {
        border: 0;
        padding: 10px;
        width: 90%;
        margin-right: 0.5%;
      }
      form button {
        width: 9%;
        background: rgb(130, 224, 255);
        border: none;
        padding: 10px;
        cursor: pointer;
      }
      #users {
        background: #000;
        padding: 3px;
      }
      #messages {
        list-style-type: none;
        margin: 0;
        padding: 0;
      }
      #messages li, #users li {
        padding: 5px 10px;
      }
      #messages li:nth-child(odd), #users li {
        background: #eee;
      }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js"></script>
  </head>
  <body>
    <div className="usersContainer">
      <form id="setNickForm" action="">
        <input id="nickInput" data-testid="nickname-box" placeholder="Digite seu Nick aqui" />
        <button data-testid="nickname-button">Definir Nick</button>
      </form>
      <h1>Usu√°rios online:</h1>
      <ul id="users"></ul>
    </div>
    <div className="messagesContainer">
      <ul id="messages">
        <% messagesToRender.forEach((message) => { %>
        <li data-testid="message"><%= message %></li>
      <% }); %>
      </ul>
      <form id="sendMessageForm" action="">
        <input id="messageInput" data-testid="message-box" autocomplete="off" />
        <button data-testid="send-button">Enviar</button>
      </form>
    </div>
  </body>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const randomNick = () => Math.random().toFixed(36).substring(2, 18);
    const messageForm = document.querySelector('#sendMessageForm');
    const messageInput = document.querySelector('#messageInput');
    let nickname = '';

    messageForm.addEventListener('submit', (event) =>{
      event.preventDefault();
      const chatMessage = messageInput.value;
      socket.emit('message', { chatMessage, nickname });
      messageInput.value = '';
      return false;
    })
    const createMessage = (message) => {
      const messagesUl = document.querySelector('#messages');
      const li = document.createElement('li');
      li.innerText = message;
      li.setAttribute('data-testid', 'message');
      messagesUl.appendChild(li);
    }

    const usersUl = document.querySelector('#users');

    const createUserList = (users) => {
      const otherUsers =  users.filter(({ userId }) => userId !== socket.id);
      const firstUser = users.filter(({ userId }) => userId === socket.id);
      const orderedUsers = firstUser.concat(otherUsers);
      
      nickname = users.find(({ userId }) => userId === socket.id).userNick;

      usersUl.innerHTML = '';
      orderedUsers.forEach((user) => {
        const li = document.createElement('li');
        li.innerText = user.userNick;
        li.setAttribute('data-testid', 'online-user');
        usersUl.appendChild(li);
      });
    }

    const nickForm = document.querySelector('#setNickForm');
    const nickInput = document.querySelector('#nickInput');

    nickForm.addEventListener('submit', (event) =>{
      event.preventDefault();
      if (nickInput.value) {
        socket.emit('setNick', { nickname: nickInput.value, userNick: nickname });
        return false;
      }
    })

    socket.on('connect', () => {
      userNickname = randomNick();
      socket.emit('login', { nickname: userNickname });
    });
    socket.on('message', (message) => createMessage(message));
    socket.on('updateUsers', (users) => createUserList(users));
    socket.on('setNick', ( nick ) => createMessage(message));
  </script>
</html>